/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { GameSessionService } from "../gameSession.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { GameSessionCreateInput } from "./GameSessionCreateInput";
import { GameSession } from "./GameSession";
import { GameSessionFindManyArgs } from "./GameSessionFindManyArgs";
import { GameSessionWhereUniqueInput } from "./GameSessionWhereUniqueInput";
import { GameSessionUpdateInput } from "./GameSessionUpdateInput";
import { StrategyFindManyArgs } from "../../strategy/base/StrategyFindManyArgs";
import { Strategy } from "../../strategy/base/Strategy";
import { StrategyWhereUniqueInput } from "../../strategy/base/StrategyWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class GameSessionControllerBase {
  constructor(
    protected readonly service: GameSessionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GameSession })
  @nestAccessControl.UseRoles({
    resource: "GameSession",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createGameSession(
    @common.Body() data: GameSessionCreateInput
  ): Promise<GameSession> {
    return await this.service.createGameSession({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [GameSession] })
  @ApiNestedQuery(GameSessionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "GameSession",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async gameSessions(@common.Req() request: Request): Promise<GameSession[]> {
    const args = plainToClass(GameSessionFindManyArgs, request.query);
    return this.service.gameSessions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GameSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "GameSession",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async gameSession(
    @common.Param() params: GameSessionWhereUniqueInput
  ): Promise<GameSession | null> {
    const result = await this.service.gameSession({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GameSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "GameSession",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateGameSession(
    @common.Param() params: GameSessionWhereUniqueInput,
    @common.Body() data: GameSessionUpdateInput
  ): Promise<GameSession | null> {
    try {
      return await this.service.updateGameSession({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GameSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "GameSession",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteGameSession(
    @common.Param() params: GameSessionWhereUniqueInput
  ): Promise<GameSession | null> {
    try {
      return await this.service.deleteGameSession({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/strategies")
  @ApiNestedQuery(StrategyFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Strategy",
    action: "read",
    possession: "any",
  })
  async findStrategies(
    @common.Req() request: Request,
    @common.Param() params: GameSessionWhereUniqueInput
  ): Promise<Strategy[]> {
    const query = plainToClass(StrategyFindManyArgs, request.query);
    const results = await this.service.findStrategies(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,

        gameSession: {
          select: {
            id: true,
          },
        },

        id: true,

        player: {
          select: {
            id: true,
          },
        },

        scenario: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/strategies")
  @nestAccessControl.UseRoles({
    resource: "GameSession",
    action: "update",
    possession: "any",
  })
  async connectStrategies(
    @common.Param() params: GameSessionWhereUniqueInput,
    @common.Body() body: StrategyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      strategies: {
        connect: body,
      },
    };
    await this.service.updateGameSession({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/strategies")
  @nestAccessControl.UseRoles({
    resource: "GameSession",
    action: "update",
    possession: "any",
  })
  async updateStrategies(
    @common.Param() params: GameSessionWhereUniqueInput,
    @common.Body() body: StrategyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      strategies: {
        set: body,
      },
    };
    await this.service.updateGameSession({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/strategies")
  @nestAccessControl.UseRoles({
    resource: "GameSession",
    action: "update",
    possession: "any",
  })
  async disconnectStrategies(
    @common.Param() params: GameSessionWhereUniqueInput,
    @common.Body() body: StrategyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      strategies: {
        disconnect: body,
      },
    };
    await this.service.updateGameSession({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Post("/game-sessions")
  @swagger.ApiOkResponse({
    type: GameSession,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateGameSession(
    @common.Body()
    body: GameSessionUpdateInput
  ): Promise<GameSession> {
    return this.service.CreateGameSession(body);
  }

  @common.Delete("/game-sessions/:id")
  @swagger.ApiOkResponse({
    type: GameSession,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async DeleteGameSession(
    @common.Body()
    body: GameSessionUpdateInput
  ): Promise<GameSession> {
    return this.service.DeleteGameSession(body);
  }

  @common.Get("/game-sessions/:id")
  @swagger.ApiOkResponse({
    type: GameSession,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetGameSessionById(
    @common.Body()
    body: GameSessionUpdateInput
  ): Promise<GameSession> {
    return this.service.GetGameSessionById(body);
  }

  @common.Get("/game-sessions")
  @swagger.ApiOkResponse({
    type: GameSession,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ListGameSessions(
    @common.Body()
    body: GameSessionUpdateInput
  ): Promise<GameSession[]> {
    return this.service.ListGameSessions(body);
  }

  @common.Put("/game-sessions/:id")
  @swagger.ApiOkResponse({
    type: GameSession,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UpdateGameSession(
    @common.Body()
    body: GameSessionUpdateInput
  ): Promise<GameSession> {
    return this.service.UpdateGameSession(body);
  }
}
